
Function type - is type which describe a function
    regarding the parameter and there return value of that function





  EX-1>---
  function add (n1:number,n2:number):number{
      return n1+n2
  }

  function printResult(num:number):void{
      console.log("Result :" + num)
  }
  
  printResult(53)
  console.log(printResult(53))//undefine


  EX-2>-- above function return undefine but it return 

    function printResult(num:number):undefined{//error
      console.log("Result :" + num)
  }
  
  printResult(53)


  EX-3> can use void with return but return should not return any thing

   function printResult(num:number):void{
      console.log("Result :" + num)
      return
  }



  ----------27. Function Type---------------

EX-1>-- this code will couse run time error

function add (n1:number,n2:number):number{
    return n1+n2
}

let combineValues 
combineValues = add;
combineValues=5
  
console.log(combineValues(8,8))//Uncaught ReferenceError: exports is not defined

EX-2> to avoid this mistake we define the type of combineValues: as function

it will now give runtime error here instead of compile time

function add (n1:number,n2:number):number{
    return n1+n2
}

let combineValues :Function
combineValues = add;
//combineValues=5//Type 'number' is not assignable to type 'Function'

console.log(combineValues(8,8))


EX-4>

function add (n1:number,n2:number):number{
      return n1+n2
  }

  function printResult(num:number):void{
      console.log("Result :" + num)
      return
  }
  
  printResult(53)
  console.log(printResult(53))//undefine

  let combineValues :Function
  combineValues = add;
  
  combineValues=printResult//it doesn't match with calling function in clg down bellow
  //which cause O/P as undefie
  O/P- undefin

  console.log(combineValues(8,8))//undefine

    here combineValues type is function means it can take any function 
    which mey cause problem

-->which can be over come by more specifing type of combineValues variable
    -combineValues:()=>number  //with no parameter return type num 
    -combineValues:(a:number,b:number)=>numbert//with two parameter both of type number return type num



EX-5>--
let combineValues :(a:number,b:number)=>number
combineValues = add;

//combineValues=printResult//Type '(num: number) => void' is not assignable to type '(a: number, b: number) => number'.
//Type 'void' is not assignable to type 'number'

  console.log(combineValues(8,8))



  --------------CallBack Function-----------------------------------

  EX-1>

  function  addAndHandle(n1:number,n2:number,cb:(num:number)=>void){
    const result = n1+n2
    cb(result)
}

addAndHandle(10,20,(result)=>{
    console.log(result)//30
})


EX-2>----------Ignore Return Type--------------

function  addAndHandle(n1:number,n2:number,cb:(num:number)=>void){
    const result = n1+n2
    cb(result)
}

addAndHandle(10,20,(result)=>{
    console.log(result)//30
    return result// it wiil ignore return tupe
})


here it will ignore return type because "cb" return is void

